Sujet:	programmation
Lien:	https://openclassrooms.com/fr/courses/6900101-creez-une-application-java-avec-spring-boot/7077979-creez-votre-projet
Auteur:	romain seza
Autlink:	o
Date: 2024/02

============ Présentation ============

Spring-boot est un framework pour développer des appli web aussi facilement que des projets java basiques.
Il est constitué en modules (starters).
Spring-boot-starter
Spring-boot-starter-core
Spring-boot-starter-data-jpa
Spring-boot-starter-security
Spring-boot-starter-test
Spring-boot-starter-web

mon jdk
C:\dev\synergie\app\java\jdk1.8.0_65

============ le logging ============

https://www.jmdoudoux.fr/java/dej/chap-logging.htm
https://docs.oracle.com/javase/8/docs/api/java/util/logging/SimpleFormatter.html
https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/logging/java/SimpleFormatter.html
https://www.geeksforgeeks.org/simpleformatter-in-java-logging-api/
https://commons.apache.org/proper/commons-logging/
https://cwiki.apache.org/confluence/display/commons/Logging
https://stackoverflow.com/questions/2317983/how-to-disable-stack-trace-generation-in-a-java-program
http://www.java2s.com/Code/Java/Language-Basics/UseLoggerwithsimpleformatterandFileHandler.htm
https://stackoverflow.com/questions/8492112/use-custom-class-for-spring-logging
https://commons.apache.org/proper/commons-logging/guide.html#Creating%20a%20Log%20Implementation
https://techdatafuture.com/en_article?id=a4c869fa-da5e-44f0-9547-b4437620b7f3

https://stackoverflow.com/questions/31172802/logging-config-configuration-for-spring-boot
System.setProperty("logging.config", "classpath:portal-log4j2.yaml");
CONSOLE_LOG_PATTERN

C:\dev\synergie\app\java\jdk1.8.0_65\jre\lib\logging.properties

*** logging de java ***

https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.logging.custom-log-configuration
https://github.com/spring-projects/spring-boot/blob/v3.2.3/spring-boot-project/spring-boot/src/main/resources/org/springframework/boot/logging/java/logging-file.properties



*** avec lombok ***

https://www.slf4j.org/api/org/slf4j/Logger.html

@Slf4j
MaClasse{
	maFonction(){
	log.debug ("coucou");
}}
log correspond au type org.slf4j.Logger

============ Lexique ============

Ioc container: Truc qui gère les objets java et leur cycle de vie. Inversion of control.
Bean: Classe java gérée par spring. Annotée par @component.
Entity: Bean qui représente une table en base de donnée. Annotée par @entity.
Version de maven utilisée: 3.6.3
Window / préférences / maven / installations
Version de java utilisée: Jdk 1.8
Window / préférences / java / installed jre
Localisation du projet:
C:/users/deborah.powers/eclipse-workspace/spring
Projet explorer / clique droit sur mon projet / show in / system explorer

============ Initialisation ============

Création avec spring-initializer
https://start.spring.io/
Le dépaqueter dans c:/users/deborah.powers/eclipse-workspace/
Attention, spring-initializer ne créé plus de projet avec java 8.
Il faut modifier manuellement le pom.
<java.version>8</java.version>
<artifactid>spring-boot-starter-parent</artifactid><version>2.7.9</version>
Faire un maven update
Faire un maven clean install
Lancer l'appli:
Application.java / clique droit / run as java application

============ Structure minimale ============

https://openclassrooms.com/fr/courses/6900101-creez-une-application-java-avec-spring-boot/7077985-observez-la-structure-minimale
Src/main/java/application.java
Classe principale contenant main, annotée @springbootapplication.
Src/main/ressources/application.properties
Spring-boot lit tout seul les fichiers xxx.properties.
Src/test/java/
Springbootapplication combine les fonctions de trois annotations:
	Springbootconfiguration, pour les classes de configuration
	Enableautoconfiguration
	Componentscan, indique qu'il faut rechercher des classes annotées

============ Bonnes pratiques pour étoffer la structure ============

Couche controller: Gérer les interrations entre l'utilisateur et l'appli.
Couche service: Fonctionnement de l'appli.
Couche repository: Interragir avec les bases de données, les sources de données.
Couche modèle: Gérer les objets manipulés par les autres couches.
Chaque couche correspond à un package dans scr/main/java.

============ Premier code ! Ecrire dans la console ============

Classe service/ecritdansconsole
Il est possible de modifier application afin d'y mettre le code, mais il est conseillé de laisser main tranquille et de mettre mon code ailleur.

============ Tester mon code ============

Dans /spring/src/test/java/tuto/spring/
@springboottest pour charger le contexte spring, les machins spring, lors des tests.
Lancer les tests:
Mon projet / clique droit / run as / maven test

============ Déployer mon code ============

L'environnement d'execution doit contenir un jre.
Run as / maven configuration
Goal: Spring-boot: Run

============ Créer une api ============

https://openclassrooms.com/fr/courses/6900101-creez-une-application-java-avec-spring-boot/7078007-creez-lapi-avec-les-bons-starters
https://github.com/openclassrooms-student-center/hr-association/blob/master/api/src
Projet rhapi

************ Dans le pom ************

Spring-boot-starter-web, communiquer avec les autres aplli. Gérer les endpoints.
Spring-boot-starter-data-jpa, gérer la persitence des données
Dépendence de la bdd, h2 dans le tutoriel.

************ Utiliser h2 ************

https://apero-tech.fr/utiliser-une-base-h2-avec-springboot/
Dans application.properties, rajouter les configurations pour utiliser h2.
Dans src/main/ressourses, rajouter les fichiers shema.sql et data.sql.
Dans les logs, repérer la ligne
O.s.b.a.h2.h2consoleautoconfiguration: H2 console available at '/h2'. Database available at 'jdbc: H2: Mem: Demo'
Dans mon navigateur, entrer http://localhost:1407/h2/
Le gestionnaire de base h2 apparait.
Jdbc url: Jdbc: H2: Mem: Demo
Password: Celui précisé dans application.properties.

************ Gérer les données selon le principe rest ************

Créer les classes.
Couche		objectif
Controller	réceptionner la requête et fournir la réponse
Service		exécuter les traitements métiers
Repository	communiquer avec la source de données
Model		contenir les objets métiers
Annotations pour les endpoints: @getmapping, @postmapping, @patchmapping, @putmapping, @deletemapping, @requestmapping.
@requestmapping(value = "/employees", method = requestmethod.get)
@getmapping("/employees")

************ Tester mon api ************

https://openclassrooms.com/fr/courses/6900101-creez-une-application-java-avec-spring-boot/7078023-testez-votre-api-avec-spring-boot
Les tu du controller
@webmvctest(controllers = employeecontroller.class)
Employeecontrollertest
Ce tu mime le controller et l'appli appelante.
Get("/employees") fait une requête get sur l'url /employees, comme quand je tape l'url dans mon navigateur.
Les ti
Employeeti mime l'appel d'une appli. Toutes les classes sont mises en jeux.
@springboottest et @autoconfiguremockmvc chargent toutes les classes, le contexte.

============ Créer un site web ============

https://openclassrooms.com/fr/courses/6900101-creez-une-application-java-avec-spring-boot/7078033-configurez-et-structurez-votre-projet-avec-des-packages
https://github.com/openclassrooms-student-center/hr-association/blob/master/webapp/src
Projet rhweb
Il communiquera avec mon api. Il est organisé selon le modèle mvc.
L'utilisateur envoie une requête au controller. Celui-ci récupère les données auprès du modèle et créer la vue, qu'il renvoi à l'utilisateur.
Resttemplate échange avec l'api rest et transforme le résultat json en objet java.
Responseentity<retour> response = resttemplate.exchange(url, httpmethod.put, params, retour.class);
https://openclassrooms.com/fr/courses/6900101-creez-une-application-java-avec-spring-boot/7078047-testez-et-deployez-votre-projet-web


============ Erreurs ============

J'ai déjà créé l'entity employee.
Le script data.sql créé et rempli la table employee.
La table public.employee existe, mais elle est vide.
L'entity créé une nouvelle table. En éffaçant la table remplie créée par data.sql.
Dans application.properties,
# utiliser les scripts sql apres la creation de la table par l'entity
Spring.jpa.defer-datasource-initialization=true

************************************************

Lors du maven install
Je veux créer un fichier h2 tuto-h2, qui n'existe pas.
Caused by: Org.h2.mvstore.mvstoreexception: The file is locked: C:/users/deborah.powers/eclipse-workspace/spring/src/main/resources/tuto-h2.mv.db [2.1.214/7]
Remplacer l'initialisation via un fichier par l'initialisation à la volée.

************************************************

Lors du maven install
[info] build failure
[info] ------------

[error] failed to execute goal org.apache.maven.plugins: Maven-resources-plugin: 3.2.0: Resources (default-resources) on project spring: Input length = 1 -> [help 1]
Il y a des caratères non utf8 dans application.properties, comme des é ou des à. Il faut supprimer les accents, même dans les commentaires.

************************************************

Lors du spring-boot: Run
Web server failed to start. Port 8080 was already in use.
Dans application.properties
Server.port= 1407

************************************************

Lors du spring-boot: Run
J'utilise un port qui n'est utilisé que par mon appli. Je viens de le faire tourner une première fois, qui a bien marché.
Web server failed to start. Port 1404 was already in use.

************************************************

Lors du maven clean install
An internal error occurred during: "launching executing clean in c__users_deborah.powers_eclipse-workspace_spring".
Java.lang.nullpointerexception
La version de spring-boot utilisée dans le pom est trop récente. Elle ne fonctionne pas avec java 8.

************************************************

SLF4J: Class path contains multiple SLF4J bindings.
SLF4J: Found binding in [jar:file:/C:/Users/deborah.powers/.m2/repository/ch/qos/logback/logback-classic/1.2.11/logback-classic-1.2.11.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/C:/Users/deborah.powers/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.17.2/log4j-slf4j-impl-2.17.2.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J: Actual binding is of type [ch.qos.logback.classic.util.ContextSelectorStaticBinder]